// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediabankBridgeClient is the client API for MediabankBridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediabankBridgeClient interface {
	CreateSubclip(ctx context.Context, in *CreateSubclipRequest, opts ...grpc.CallOption) (*CreateSubclipResponse, error)
}

type mediabankBridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewMediabankBridgeClient(cc grpc.ClientConnInterface) MediabankBridgeClient {
	return &mediabankBridgeClient{cc}
}

func (c *mediabankBridgeClient) CreateSubclip(ctx context.Context, in *CreateSubclipRequest, opts ...grpc.CallOption) (*CreateSubclipResponse, error) {
	out := new(CreateSubclipResponse)
	err := c.cc.Invoke(ctx, "/proto.MediabankBridge/CreateSubclip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediabankBridgeServer is the server API for MediabankBridge service.
// All implementations must embed UnimplementedMediabankBridgeServer
// for forward compatibility
type MediabankBridgeServer interface {
	CreateSubclip(context.Context, *CreateSubclipRequest) (*CreateSubclipResponse, error)
	mustEmbedUnimplementedMediabankBridgeServer()
}

// UnimplementedMediabankBridgeServer must be embedded to have forward compatible implementations.
type UnimplementedMediabankBridgeServer struct {
}

func (UnimplementedMediabankBridgeServer) CreateSubclip(context.Context, *CreateSubclipRequest) (*CreateSubclipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubclip not implemented")
}
func (UnimplementedMediabankBridgeServer) mustEmbedUnimplementedMediabankBridgeServer() {}

// UnsafeMediabankBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediabankBridgeServer will
// result in compilation errors.
type UnsafeMediabankBridgeServer interface {
	mustEmbedUnimplementedMediabankBridgeServer()
}

func RegisterMediabankBridgeServer(s grpc.ServiceRegistrar, srv MediabankBridgeServer) {
	s.RegisterService(&MediabankBridge_ServiceDesc, srv)
}

func _MediabankBridge_CreateSubclip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubclipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediabankBridgeServer).CreateSubclip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MediabankBridge/CreateSubclip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediabankBridgeServer).CreateSubclip(ctx, req.(*CreateSubclipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediabankBridge_ServiceDesc is the grpc.ServiceDesc for MediabankBridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediabankBridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MediabankBridge",
	HandlerType: (*MediabankBridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubclip",
			Handler:    _MediabankBridge_CreateSubclip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
